// CS 61C Fall 2014 Project 3

// include SSE intrinsics
#if defined(_MSC_VER)
#include <intrin.h>
#elif defined(__GNUC__) && (defined(__x86_64__) || defined(__i386__))
#include <x86intrin.h>
#endif
#include <stdbool.h>
#include "utils.h"
#include <stdio.h>
#include "calcDepthOptimized.h"
#include "calcDepthNaive.h"

#define ABS(x) (((x) < 0) ? (-(x)) : (x))

void calcDepthOptimized(float *depth, float *left, float *right, int imageWidth, int imageHeight, int featureWidth, int featureHeight, int maximumDisplacement)
{
	
	for (int j = 0; j < imageHeight; j++){
		for(int i = 0; i < imageWidth; i++){
			depth[j*imageWidth + i] = 0;
		}
	}
	if(maximumDisplacement == 0){
		return;
	}
	//calcDepthNaive(depth, left, right, imageWidth, imageHeight, featureWidth, featureHeight, maximumDisplacement, NULL);
	// if (floatOps != NULL)
	// {
	// 	*floatOps = 0;
	// }

	for (int y = featureHeight; y < imageHeight - featureHeight; y++)
	{
		for (int x = featureWidth; x < imageWidth - featureWidth; x++)
		{
			// if ((y < featureHeight) || (y >= imageHeight - featureHeight) || (x < featureWidth) || (x >= imageWidth - featureWidth))
			// {
			// 	depth[y * imageWidth + x] = 0;
			// 	continue;
			// }

			float minimumSquaredDifference = -1;
			int minimumDy = 0;
			int minimumDx = 0;

			for (int dy = -maximumDisplacement; dy <= maximumDisplacement; dy++)
			{
				for (int dx = -maximumDisplacement; dx <= maximumDisplacement; dx++)
				{
					if (y + dy - featureHeight < 0 || y + dy + featureHeight >= imageHeight || x + dx - featureWidth < 0 || x + dx + featureWidth >= imageWidth)
					{
						continue;
					}

					float squaredDifference = 0;
					__m128 main_sum = _mm_setzero_ps();
					float tail_sum = 0;
					float result[4];

					//int leftY
					for (int boxY = 0; boxY <= featureHeight; boxY++)
					{
						int lowerLeftY = y + boxY;
						int upperLeftY = y - boxY;
						int lowerRightY = y + dy + boxY;
						int upperRightY = y + dy - boxY;
						int leftX;
						int rightX;
						__m128 leftVector;
						__m128 rightVector;
						//__m128 leftUpperVector;
						//__m128 rightUpperVector;
						__m128 difference;
						
						for (int boxX = -featureWidth; boxX < -featureWidth + (featureWidth*2)/4*4; boxX+=4)//less than?
						{
							leftX = x + boxX;
							rightX = x + dx + boxX;
							
							leftVector = _mm_loadu_ps(left + lowerLeftY * imageWidth + leftX);//creating for lower side
							rightVector = _mm_loadu_ps(right + lowerRightY * imageWidth + rightX);//reating for lower side
							difference = _mm_sub_ps(leftVector, rightVector);
							main_sum = _mm_add_ps(main_sum, _mm_mul_ps(difference, difference)); //added this line here
							if (boxY != 0) {
								leftVector = _mm_loadu_ps(left + upperLeftY * imageWidth + leftX);
								rightVector = _mm_loadu_ps(right + upperRightY * imageWidth + rightX);
								difference = _mm_sub_ps(leftVector, rightVector);
								main_sum = _mm_add_ps(main_sum, _mm_mul_ps(difference, difference));
							}
							
						}
						
					}
					if ((2*featureWidth+1) % 4 != 0) {
						for (int boxY = 0; boxY <= featureHeight; boxY++) {
							int lowerLeftY = y + boxY;
							int upperLeftY = y - boxY;
							int lowerRightY = y + dy + boxY;
							int upperRightY = y + dy - boxY;
							int leftX;
							int rightX;
							float difference;
							for(int boxX = -featureWidth + (featureWidth*2)/4*4; boxX <= featureWidth; boxX ++){
								leftX = x + boxX;
								rightX = x + dx + boxX;
								difference = left[lowerLeftY * imageWidth + leftX] - right[lowerRightY * imageWidth + rightX];
//								

								tail_sum += difference*difference;
								if (boxY != 0) {
									difference = left[upperLeftY * imageWidth + leftX] - right[upperRightY * imageWidth + rightX];
									tail_sum += difference*difference;
								}
								
							}
						}
						
					}

					_mm_storeu_ps(result, main_sum);
					// for (int i = 0; i < 4; i++) {
					// 	printf(" %d %f\n",i,result[i]);
					// }
					//printf("tail %f\n", tail_sum);
					//printf("result_0 %f, result_1 %f, result_2 %f, result_3 %f\n",result[0],result[1],result[2],result[3]);
					squaredDifference += result[0] + result[1] + result[2] + result[3] + tail_sum;
					//printf("squaredDifference %f\n",squaredDifference);
					//printf("result_0 %f, result_1 %f, result_3 %f, tail_sum %f\n", result[0],re);
					if ((minimumSquaredDifference == -1) || (minimumSquaredDifference == squaredDifference && (displacementNaive(dx, dy) < displacementNaive(minimumDx, minimumDy))) || ((minimumSquaredDifference > squaredDifference) && minimumSquaredDifference != squaredDifference))
					{
						minimumSquaredDifference = squaredDifference;
						minimumDx = dx;
						minimumDy = dy;
					}
				}
			}

			if (minimumSquaredDifference != -1)
			{
				// if (maximumDisplacement == 0)
				// {
				// 	depth[y * imageWidth + x] = 0;
				// }
				// else
				// {
					depth[y * imageWidth + x] = displacementNaive(minimumDx, minimumDy);
				// }
			}
			// else
			// {
			// 	depth[y * imageWidth + x] = 0;
			// }
		}
	}
	//printFloatImage(depth,imageWidth,imageHeight);
}
